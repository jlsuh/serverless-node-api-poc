service: serverless-node-api
frameworkVersion: "3"
useDotenv: true
provider:
  memorySize: "${env:PROVIDER_MEMORY_SIZE}"
  name: aws
  region: '${opt:region, "us-east-1"}'
  runtime: nodejs18.x
  stage: '${opt:stage, "development"}'
  timeout: "${env:PROVIDER_TIMEOUT}"
plugins:
  - serverless-dotenv-plugin
  - serverless-offline-sqs
  - serverless-offline-sqs-dlq
  - serverless-offline
  - serverless-s3-local
package:
  patterns:
    - "!node_modules/**"
custom:
  serverless-offline:
    host: "${env:SLS_HOST}"
    httpPort: "${env:SLS_HTTP_PORT}"
  serverless-offline-sqs:
    accessKeyId: "${env.${self:provider.stage}:AWS_ACCESS_KEY_ID}"
    apiVersion: "${env:SQS_API_VERSION}"
    autoCreate: true
    endpoint: "${env:BASE_URI}:${env:SQS_HOST_PORT}"
    region: "${self:provider.region}"
    secretAccessKey: "${env.${self:provider.stage}:AWS_SECRET_ACCESS_KEY}"
    skipCacheInvalidation: false
  serverless-offline-sqs-dlq:
    auditConsumer:
      onError: auditDeadLetterConsumer
      maxReceiveCount: 1
  s3:
    directory: ./s3-local
    host: "${env:S3_HOST}"
    port: "${env:S3_PORT}"
resources:
  Resources:
    LocalBucket:
      Properties:
        BucketName: "${env:S3_LOCAL_BUCKET_NAME}"
      Type: "AWS::S3::Bucket"
    LocalQueueSQS:
      Properties:
        QueueName: "${env:SQS_QUEUE_NAME}"
      Type: "AWS::SQS::Queue"
    LocalQueueDLQ:
      Properties:
        QueueName: "${env:DLQ_QUEUE_NAME}"
      Type: "AWS::SQS::Queue"
functions:
  auditConsumer:
    handler: src/auditConsumer.handler
    events:
      - sqs:
          arn:
            "Fn::GetAtt":
              - LocalQueueSQS
              - Arn
  auditDeadLetterConsumer:
    handler: src/auditDeadLetterConsumer.handler
    events:
      - sqs:
          arn:
            "Fn::GetAtt":
              - LocalQueueDLQ
              - Arn
  initDb:
    handler: src/db/initDb.handler
  authorizer:
    handler: src/authorizer.handler
  login:
    events:
      - http:
          cors: true
          method: post
          path: login
    handler: src/login.handler
  getDbUsers:
    events:
      - http:
          authorizer: authorizer
          cors: true
          method: get
          path: db/users
    handler: src/getDbUsers.handler
  getDataUsers:
    events:
      - http:
          authorizer: authorizer
          cors: true
          method: get
          path: data/users
    handler: src/getDataUsers.handler
  s3PutObject:
    events:
      - http:
          authorizer: authorizer
          cors: true
          method: put
          path: "s3/buckets/{bucketName}"
    handler: src/s3PutObject.handler
  s3GetBucket:
    events:
      - http:
          authorizer: authorizer
          cors: true
          method: get
          path: "s3/buckets/{bucketName}"
    handler: src/s3GetBucket.handler
  s3GetObject:
    events:
      - http:
          authorizer: authorizer
          cors: true
          method: get
          path: "s3/buckets/{bucketName}/objects/{objectName}"
    handler: src/s3GetObject.handler
  s3EventResponse:
    events:
      - s3:
          bucket: "${env:S3_LOCAL_BUCKET_NAME}"
          event: "s3:ObjectCreated:*"
    handler: src/s3EventResponse.handler
