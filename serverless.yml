service: serverless-node-api
frameworkVersion: "3"
useDotenv: true
provider:
  name: aws
  runtime: nodejs18.x
  stage: '${opt:stage, "development"}'
  region: '${opt:region, "us-east-1"}'
  memorySize: "${env:PROVIDER_MEMORY_SIZE}"
  timeout: "${env:PROVIDER_TIMEOUT}"
plugins:
  - serverless-dotenv-plugin
  - serverless-offline-sqs
  - serverless-offline
  - serverless-s3-local
package:
  patterns:
    - "!node_modules/**"
custom:
  serverless-offline:
    host: "${env:SLS_OFFLINE_HOST}"
    httpPort: "${env:SLS_OFFLINE_HTTP_PORT}"
  serverless-offline-sqs:
    accessKeyId: ${env.${self:provider.stage}:AWS_ACCESS_KEY_ID}
    apiVersion: "${env:API_VERSION}"
    autoCreate: true
    endpoint: "${env:BASE_URI}:${env:SQS_OFFLINE_HOST_PORT}"
    region: "${self:provider.region}"
    secretAccessKey: ${env.${self:provider.stage}:AWS_SECRET_ACCESS_KEY}
    skipCacheInvalidation: false
  s3:
    directory: ./s3-local
    host: "${env:S3_HOST}"
    port: "${env:S3_PORT}"
resources:
  Resources:
    LocalBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: local-bucket
    LocalQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: local-queue
functions:
  initDb:
    handler: src/db/initDb.handler
  authorizer:
    handler: src/authorizer.handler
  login:
    handler: src/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
  getDbUsers:
    handler: src/getDbUsers.handler
    events:
      - http:
          path: db/users
          method: get
          cors: true
          authorizer: authorizer
  getDataUsers:
    handler: src/getDataUsers.handler
    events:
      - http:
          path: data/users
          method: get
          cors: true
          authorizer: authorizer
  s3PutObject:
    handler: src/s3PutObject.handler
    events:
      - http:
          path: s3/buckets/{bucketName}
          method: put
          cors: true
          authorizer: authorizer
  s3GetBucket:
    handler: src/s3GetBucket.handler
    events:
      - http:
          path: s3/buckets/{bucketName}
          method: get
          cors: true
          authorizer: authorizer
  s3GetObject:
    handler: src/s3GetObject.handler
    events:
      - http:
          path: s3/buckets/{bucketName}/objects/{objectName}
          method: get
          cors: true
          authorizer: authorizer
  s3EventResponse:
    handler: src/s3EventResponse.handler
    events:
      - s3:
          bucket: local-bucket
          event: "s3:*"
