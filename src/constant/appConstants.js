const AWS_ACCESS_KEY_ID = process.env.AWS_ACCESS_KEY_ID;
const AWS_SECRET_ACCESS_KEY = process.env.AWS_SECRET_ACCESS_KEY;
const BASE_URI = process.env.BASE_URI;
const JWT_SECRET = process.env.JWT_SECRET;
const JWT_TOKEN_EXPIRATION = process.env.JWT_TOKEN_EXPIRATION;
const MIN_USERNAME_LENGTH = +process.env.MIN_USERNAME_LENGTH;
const POLICY_API_VERSION = process.env.POLICY_API_VERSION;
const POSTGRES_DB = process.env.POSTGRES_DB;
const POSTGRES_HOST = process.env.POSTGRES_HOST;
const POSTGRES_HOST_PORT = process.env.POSTGRES_HOST_PORT;
const POSTGRES_PASSWORD = process.env.POSTGRES_PASSWORD;
const POSTGRES_SCHEMA_NAME = process.env.POSTGRES_SCHEMA_NAME;
const POSTGRES_USER = process.env.POSTGRES_USER;
const S3_AUDIT_OBJECT_KEY = process.env.S3_AUDIT_OBJECT_KEY;
const S3_LOCAL_BUCKET_NAME = process.env.S3_LOCAL_BUCKET_NAME;
const S3_PORT = process.env.S3_PORT;
const SQS_HOST_PORT = process.env.SQS_HOST_PORT;
const SQS_QUEUE_NAME = process.env.SQS_QUEUE_NAME;

const config = Object.freeze({
  AWS_ACCESS_KEY_ID,
  AWS_SECRET_ACCESS_KEY,
  BASE_URI,
  JWT_SECRET,
  JWT_TOKEN_EXPIRATION,
  MIN_USERNAME_LENGTH,
  POLICY_API_VERSION,
  POSTGRES_DB,
  POSTGRES_HOST_PORT,
  POSTGRES_HOST,
  POSTGRES_PASSWORD,
  POSTGRES_SCHEMA_NAME,
  POSTGRES_USER,
  S3_AUDIT_OBJECT_KEY,
  S3_LOCAL_BUCKET_NAME,
  S3_PORT,
  SQS_HOST_PORT,
  SQS_QUEUE_NAME,
});

const statuses = Object.freeze({
  SUCCESS: "success",
  FAILURE: "failure",
});

export { config, statuses };
